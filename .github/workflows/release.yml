name: Release

on:
  push:
    tags:
      - v*

env:
  LATEST_PYTHON_VERSION: "3.11"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python environment
        uses: ./.github/actions/setup-python

      - name: Get Version
        id: version
        run: |
          echo "VERSION=$(pdm show --version)" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check Version
        if: steps.version.outputs.VERSION != steps.version.outputs.TAG_VERSION
        run: exit 1

      - name: Build and Publish Package
        run: |
          pdm publish
          gh release upload --clobber ${{ steps.version.outputs.TAG_NAME }} dist/*.tar.gz dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        python_version:
          - "3.9"
          - "3.10"
          - "3.11"
        python_variant:
          - ""
          - "-slim"
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Image Name and Scope
        id: image
        run: |
          echo "IMAGE=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT
          echo "SCOPE=${{ hashFiles('**/pdm.lock') }}-${{ matrix.python_version }}${{ matrix.python_variant }}-${{ matrix.platform }}" >> $GITHUB_OUTPUT

      - name: Generate Labels
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ${{ steps.image.outputs.IMAGE }}

      - name: Build and Publish
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: |
            PYTHON_IMAGE=${{ matrix.python_version }}
            VARIANT=${{ matrix.python_variant }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha,scope=${{ steps.image.outputs.SCOPE }}
          cache-to: type=gha,scope=${{ steps.image.outputs.SCOPE }},mode=max
          outputs: type=image,name=${{ steps.image.outputs.IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{ matrix.python_version }}${{ matrix.python_variant }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.python_version }}${{ matrix.python_variant }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python_version:
          - "3.9"
          - "3.10"
          - "3.11"
        python_variant:
          - ""
          - "-slim"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Image Name
        id: image
        run: |
          echo "IMAGE=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT

      - name: Generate Tags
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: |
            ${{ github.repository }}
          flavor: |
            suffix=-py${{ matrix.python_version }}${{ matrix.python_variant }},onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Create manifest list and push
        working-directory: /tmp/digests/${{ matrix.python_version }}${{ matrix.python_variant }}
        run: |
          docker buildx imagetools create --dry-run $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)

      - name: Generate Tags
        uses: docker/metadata-action@v5
        id: metadata-latest
        if: matrix.python_version == env.LATEST_PYTHON_VERSION
        with:
          images: |
            ${{ github.repository }}
          flavor: |
            suffix=${{ matrix.python_variant }},onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Create manifest list and push for latest python version
        if: matrix.python_version == env.LATEST_PYTHON_VERSION
        working-directory: /tmp/digests/${{ matrix.python_version }}${{ matrix.python_variant }}
        run: |
          docker buildx imagetools create --dry-run $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ github.event.repository.description }}
